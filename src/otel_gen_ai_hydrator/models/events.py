"""
Pydantic-based OpenTelemetry Gen AI Event representations following semantic conventions.

This module provides Pydantic models for OpenTelemetry Gen AI events as defined in:
https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-events/

This implementation uses Pydantic for validation and serialization capabilities.
"""

from typing import Dict, Any, Optional, Union, List
from pydantic import BaseModel, Field, validator, root_validator
from enum import Enum


class GenAISystem(str, Enum):
    """Enumeration of well-known Gen AI systems."""
    ANTHROPIC = "anthropic"
    AWS_BEDROCK = "aws.bedrock"
    AZURE_AI_INFERENCE = "azure.ai.inference"
    AZURE_AI_OPENAI = "azure.ai.openai"
    COHERE = "cohere"
    DEEPSEEK = "deepseek"
    GCP_GEMINI = "gcp.gemini"
    GCP_GEN_AI = "gcp.gen_ai"
    GCP_VERTEX_AI = "gcp.vertex_ai"
    GROQ = "groq"
    IBM_WATSONX_AI = "ibm.watsonx.ai"
    MISTRAL_AI = "mistral_ai"
    OPENAI = "openai"
    PERPLEXITY = "perplexity"
    XAI = "xai"
    OTHER = "_OTHER"


class GenAIUserMessageBody(BaseModel):
    """
    Pydantic model representing the body of a gen_ai.user.message event.
    
    Body fields (as per OpenTelemetry spec):
        content: The contents of the user message
        role: The actual role of the message author (defaults to "user")
    """
    content: Optional[Any] = Field(
        None,
        description="The contents of the user message"
    )
    role: str = Field(
        default="user",
        description="The actual role of the message author"
    )

    class Config:
        """Pydantic configuration."""
        extra = "allow"  # Allow additional fields for extensibility


class GenAIEventBase(BaseModel):
    """
    Base class for all Gen AI events using Pydantic.
    
    Contains common properties shared across all Gen AI event types.
    According to OpenTelemetry spec, events have a body containing the actual data.
    """
    gen_ai_system: Optional[GenAISystem] = Field(
        None,
        description="The Generative AI product as identified by the client or server instrumentation"
    )

    class Config:
        """Pydantic configuration."""
        use_enum_values = True
        extra = "allow"  # Allow additional fields for extensibility


class GenAIUserMessageEvent(GenAIEventBase):
    """
    Pydantic model representing a gen_ai.user.message event.
    
    This event describes the user message passed to the GenAI model.
    Uses a structured body class for type safety and validation.
    """
    body: GenAIUserMessageBody = Field(
        default_factory=lambda: GenAIUserMessageBody(),
        description="Event body containing the actual event data as per OpenTelemetry spec"
    )

    class Config:
        """Pydantic configuration."""
        use_enum_values = True
        extra = "allow"


class ToolCallType(str, Enum):
    """Enumeration of tool call types."""
    FUNCTION = "function"


class FunctionCall(BaseModel):
    """
    Pydantic model representing a function call within a tool call.
    """
    name: str = Field(
        ...,
        description="The name of the function"
    )
    arguments: Optional[Any] = Field(
        None,
        description="The arguments of the function as provided in the LLM response"
    )

    class Config:
        """Pydantic configuration."""
        extra = "allow"


class ToolCall(BaseModel):
    """
    Base Pydantic model representing a tool call generated by the model.
    """
    id: str = Field(
        None,
        description="The id of the tool call"
    )
    type: ToolCallType = Field(
        ...,
        description="The type of the tool"
    )

    class Config:
        """Pydantic configuration."""
        use_enum_values = True
        extra = "allow"


class FunctionToolCall(ToolCall):
    """
    Pydantic model representing a function tool call generated by the model.
    """
    type: ToolCallType = Field(
        default=ToolCallType.FUNCTION,
        description="The type of the tool (always 'function' for function tool calls)"
    )
    function: FunctionCall = Field(
        ...,
        description="The function call"
    )

    @validator('type', always=True)
    def validate_type(cls, v):
        """Ensure type is always 'function' for function tool calls."""
        return ToolCallType.FUNCTION

    class Config:
        """Pydantic configuration."""
        use_enum_values = True
        extra = "allow"


class GenAIAssistantMessageBody(BaseModel):
    """
    Pydantic model representing the body of a gen_ai.assistant.message event.
    
    Body fields (as per OpenTelemetry spec):
        content: The contents of the assistant message
        role: The actual role of the message author (defaults to "assistant")
        tool_calls: The tool calls generated by the model, such as function calls
    """
    content: Optional[Any] = Field(
        None,
        description="The contents of the assistant message"
    )
    role: str = Field(
        default="assistant",
        description="The actual role of the message author"
    )
    tool_calls: Optional[List[Union[FunctionToolCall, ToolCall]]] = Field(
        None,
        description="The tool calls generated by the model, such as function calls"
    )

    class Config:
        """Pydantic configuration."""
        extra = "allow"  # Allow additional fields for extensibility


class GenAIAssistantMessageEvent(GenAIEventBase):
    """
    Pydantic model representing a gen_ai.assistant.message event.
    
    This event describes the assistant message passed to GenAI system.
    Uses a structured body class for type safety and validation.
    """
    body: GenAIAssistantMessageBody = Field(
        default_factory=lambda: GenAIAssistantMessageBody(),
        description="Event body containing the actual event data as per OpenTelemetry spec"
    )

    class Config:
        """Pydantic configuration."""
        use_enum_values = True
        extra = "allow"


class GenAISystemMessageBody(BaseModel):
    """
    Pydantic model representing the body of a gen_ai.system.message event.
    
    Body fields (as per OpenTelemetry spec):
        content: The contents of the system message
        role: The actual role of the message author (defaults to "system")
    """
    content: Optional[Any] = Field(
        None,
        description="The contents of the system message"
    )
    role: str = Field(
        default="system",
        description="The actual role of the message author"
    )

    class Config:
        """Pydantic configuration."""
        extra = "allow"  # Allow additional fields for extensibility


class GenAISystemMessageEvent(GenAIEventBase):
    """
    Pydantic model representing a gen_ai.system.message event.
    
    This event describes the system instructions passed to the GenAI model.
    Uses a structured body class for type safety and validation.
    """
    body: GenAISystemMessageBody = Field(
        default_factory=lambda: GenAISystemMessageBody(),
        description="Event body containing the actual event data as per OpenTelemetry spec"
    )

    class Config:
        """Pydantic configuration."""
        use_enum_values = True
        extra = "allow"


class GenAIToolMessageBody(BaseModel):
    """
    Pydantic model representing the body of a gen_ai.tool.message event.
    
    Body fields (as per OpenTelemetry spec):
        content: The contents of the tool message
        id: Tool call id that this message is responding to
        role: The actual role of the message author (defaults to "tool")
    """
    content: Optional[Any] = Field(
        None,
        description="The contents of the tool message"
    )
    id: str = Field(
        None,
        description="Tool call id that this message is responding to"
    )
    role: str = Field(
        default="tool",
        description="The actual role of the message author"
    )

    class Config:
        """Pydantic configuration."""
        extra = "allow"  # Allow additional fields for extensibility


class GenAIToolMessageEvent(GenAIEventBase):
    """
    Pydantic model representing a gen_ai.tool.message event.
    
    This event describes the response from a tool or function call passed to the GenAI model.
    Uses a structured body class for type safety and validation.
    """
    body: GenAIToolMessageBody = Field(
        default_factory=lambda: GenAIToolMessageBody(id=""),
        description="Event body containing the actual event data as per OpenTelemetry spec"
    )

    class Config:
        """Pydantic configuration."""
        use_enum_values = True
        extra = "allow"


class FinishReason(str, Enum):
    """Enumeration of finish reasons for GenAI choice events."""
    CONTENT_FILTER = "content_filter"
    ERROR = "error"
    LENGTH = "length"
    STOP = "stop"
    TOOL_CALLS = "tool_calls"


class ChoiceMessage(BaseModel):
    """
    Pydantic model representing a GenAI response message within a choice.
    """
    content: Optional[Any] = Field(
        None,
        description="The contents of the assistant message"
    )
    role: str = Field(
        default="assistant",
        description="The actual role of the message author"
    )
    tool_calls: Optional[List[Union[FunctionToolCall, ToolCall]]] = Field(
        None,
        description="The tool calls generated by the model, such as function calls"
    )

    class Config:
        """Pydantic configuration."""
        extra = "allow"


class GenAIChoiceBody(BaseModel):
    """
    Pydantic model representing the body of a gen_ai.choice event.
    
    Body fields (as per OpenTelemetry spec):
        finish_reason: The reason the model stopped generating tokens
        index: The index of the choice in the list of choices
        message: GenAI response message
        tool_calls: The tool calls generated by the model (legacy field, prefer message.tool_calls)
    """
    finish_reason: FinishReason = Field(
        FinishReason.STOP,
        description="The reason the model stopped generating tokens"
    )
    index: int = Field(
        default=0,
        description="The index of the choice in the list of choices"
    )
    message: Optional[ChoiceMessage] = Field(
        None,
        description="GenAI response message"
    )
    tool_calls: Optional[List[Union[FunctionToolCall, ToolCall]]] = Field(
        None,
        description="The tool calls generated by the model, such as function calls (legacy field)"
    )

    class Config:
        """Pydantic configuration."""
        extra = "allow"  # Allow additional fields for extensibility


class GenAIChoiceEvent(GenAIEventBase):
    """
    Pydantic model representing a gen_ai.choice event.
    
    This event describes the Gen AI response message.
    Uses a structured body class for type safety and validation.
    """
    body: GenAIChoiceBody = Field(
        ...,
        description="Event body containing the actual event data as per OpenTelemetry spec"
    )

    class Config:
        """Pydantic configuration."""
        use_enum_values = True
        extra = "allow"
